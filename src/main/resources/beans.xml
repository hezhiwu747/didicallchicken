<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


       <context:component-scan base-package="com.didicallchicken">
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>


       <!--引入配置文件-->
       <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

       <!--配置数据源-->
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
              <property name="driverClassName" value="${jdbc.driver}"></property>
              <property name="url" value="${jdbc.url}"></property>
              <property name="username" value="${jdbc.username}"></property>
              <property name="password" value="${jdbc.password}"></property>
       </bean>
       <!--配置事务管理器-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"></property>
       </bean>
       <!--开启事务的注解驱动-->
       <tx:annotation-driven transaction-manager="transactionManager" />

       <!--配置SqlSessionFactoryBean，可以直接在IOC容器中获取SqlSessionFactory-->
       <bean class="org.mybatis.spring.SqlSessionFactoryBean">
              <!--设置mybatis核心配置文件的路径-->
              <property name="configLocation" value="classpath:mybatis-config.xml"></property>
              <!--设置数据源-->
              <property name="dataSource" ref="dataSource"></property>
              <!--设置类型别名所对应的包-->
              <property name="typeAliasesPackage" value="com.didicallchicken.pojo"></property>
       </bean>

       <!--配置mapper接口的扫描，可以将指定包下的所有mapper接口，通过sqlSession创建代理类实现对象，然后全部装配入IOC容器当中-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.didicallchicken.mapper"></property>
       </bean>

</beans>